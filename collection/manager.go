package collection

import (
	"context"
	"encoding/json"
	"fmt"
	s "pds/datastore"
	"sort"
	"sync"
	"time"

	"github.com/ipfs/go-datastore"
	"lukechampine.com/blake3"
)

const (
	// collectionsKey    = "_collections"
	collectionPrefix  = "_collection:"
	collectionRootKey = ":root"
	collectionDataKey = ":data:"
	collectionLeafKey = ":leaf:"
	collectionNodeKey = ":node:"
)

// Collection –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
type Collection struct {
	Name       string            `json:"name"`
	CreatedAt  time.Time         `json:"created_at"`
	UpdatedAt  time.Time         `json:"updated_at"`
	ItemsCount int               `json:"items_count"`
	RootHash   []byte            `json:"root_hash,omitempty"`
	Metadata   map[string]string `json:"metadata,omitempty"`
}

// CollectionMerkleProof –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
type CollectionMerkleProof struct {
	Collection string   `json:"collection"`
	Key        string   `json:"key"`
	Value      []byte   `json:"value"`
	LeafHash   []byte   `json:"leaf_hash"`
	Path       [][]byte `json:"path"`
	Positions  []bool   `json:"positions"`
	RootHash   []byte   `json:"root_hash"`
}

// MerkleNode —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞
type MerkleNode struct {
	Hash  []byte `json:"hash"`
	Left  []byte `json:"left,omitempty"`
	Right []byte `json:"right,omitempty"`
}

// KeyValue —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
type KeyValue struct {
	Key   datastore.Key
	Value []byte
}

// CollectionManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
type CollectionManager struct {
	storage     s.Datastore
	collections map[string]*Collection // —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π
	mu          sync.RWMutex
}

// NewCollectionManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–π
func NewCollectionManager(storage s.Datastore) (*CollectionManager, error) {
	cm := &CollectionManager{
		storage:     storage,
		collections: make(map[string]*Collection),
	}
	err := cm.loadCollections(context.Background())
	return cm, err
}

func (cm *CollectionManager) loadCollections(ctx context.Context) error {
	collections, err := cm.storage.Keys(ctx, datastore.NewKey(collectionPrefix))
	if err != nil {
		return err
	}
	for _, col := range collections {
		if err := cm.loadCollectionMetadata(ctx, col); err != nil {
			return err
		}
	}
	if len(cm.collections) == 0 {
		return cm.CreateCollection("_system", map[string]string{
			"description": "Default collection",
		})
	}
	return nil
}

func (cmd *CollectionManager) loadCollectionMetadata(ctx context.Context, k datastore.Key) error {
	data, err := cmd.storage.Get(ctx, k)
	if err != nil {
		return err
	}
	var collection Collection
	if err := json.Unmarshal(data, &collection); err != nil {
		return err
	}
	name := k.String()[len(collectionPrefix):]
	cmd.collections[name] = &collection
	return nil
}

// buildCollectionTreeFromStorage —Å—Ç—Ä–æ–∏—Ç Merkle Tree —á–∏—Ç–∞—è –ª–∏—Å—Ç—å—è –∏–∑ Storage
func (cmd *CollectionManager) buildCollectionTreeFromStorage(ctx context.Context, collectionName string) ([]byte, error) {

	fmt.Printf("üîç –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '%s' (—á–∏—Ç–∞–µ–º –∏–∑ Storage)\n", collectionName)

	// –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ª–∏—Å—Ç—å–µ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
	leafPrefix := datastore.NewKey(fmt.Sprintf("%s%s%s", collectionPrefix, collectionName, collectionLeafKey))
	fmt.Printf("üîç –ò—â–µ–º –ª–∏—Å—Ç—å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: %s\n", leafPrefix.String())

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Iterator –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ª–∏—Å—Ç—å–µ–≤
	leafChan, err := cmd.storage.Iterator(ctx, leafPrefix)
	if err != nil {
		return nil, fmt.Errorf("failed to create iterator: %w", err)
	}

	// –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –∏ —Ö–µ—à–∏ –ª–∏—Å—Ç—å–µ–≤ –∏–∑ Storage
	type leafEntry struct {
		key      string
		leafHash []byte
	}

	var leafEntries []leafEntry

	for kv := range leafChan {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∫–ª—é—á–∞
		fullKey := kv.Key.String()
		elementKey := fullKey[len(leafPrefix.String()):]

		leafEntries = append(leafEntries, leafEntry{
			key:      elementKey,
			leafHash: kv.Value,
		})

		fmt.Printf("  üìÑ –ù–∞–π–¥–µ–Ω –ª–∏—Å—Ç: %s ‚Üí %x\n", elementKey, kv.Value[:4])
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏—Å—Ç—å–µ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil
	if len(leafEntries) == 0 {
		fmt.Println("üì≠ –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil")
		return nil, nil
	}

	fmt.Printf("üìä –í—Å–µ–≥–æ –ª–∏—Å—Ç—å–µ–≤ –Ω–∞–π–¥–µ–Ω–æ: %d\n", len(leafEntries))

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å!)
	sort.Slice(leafEntries, func(i, j int) bool {
		return leafEntries[i].key < leafEntries[j].key
	})

	// –°–æ–∑–¥–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ö–µ—à–µ–π
	level := make([][]byte, len(leafEntries))
	for i, entry := range leafEntries {
		level[i] = entry.leafHash
		fmt.Printf("  %d: %s ‚Üí %x\n", i, entry.key, entry.leafHash[:4])
	}

	// –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ bottom-up
	fmt.Println("üèóÔ∏è –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ bottom-up...")
	levelNum := 0

	for len(level) > 1 {
		fmt.Printf("  –£—Ä–æ–≤–µ–Ω—å %d: %d —É–∑–ª–æ–≤ ‚Üí ", levelNum, len(level))

		nextLevel := make([][]byte, 0, (len(level)+1)/2)

		for i := 0; i < len(level); i += 2 {
			var nodeHash []byte

			if i+1 < len(level) {
				// –ü–∞—Ä–Ω—ã–π —É–∑–µ–ª
				nodeHash = cmd.hashPair(level[i], level[i+1])
				fmt.Printf("[%x+%x‚Üí%x] ", level[i][:2], level[i+1][:2], nodeHash[:2])
			} else {
				// –ù–µ–ø–∞—Ä–Ω—ã–π —É–∑–µ–ª
				nodeHash = level[i]
				fmt.Printf("[%x‚Üí%x] ", level[i][:2], nodeHash[:2])
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∑–µ–ª –≤ Storage
			node := &MerkleNode{
				Hash: nodeHash,
				Left: level[i],
			}
			if i+1 < len(level) {
				node.Right = level[i+1]
			}

			nodeData, _ := json.Marshal(node)
			nodeKeyStr := fmt.Sprintf("%s%s%s%x", collectionPrefix, collectionName, collectionNodeKey, nodeHash)
			nodeKey := datastore.NewKey(nodeKeyStr)
			cmd.storage.Put(ctx, nodeKey, nodeData)

			nextLevel = append(nextLevel, nodeHash)
		}

		level = nextLevel
		levelNum++
		fmt.Printf("%d —É–∑–ª–æ–≤\n", len(level))
	}

	rootHash := level[0]
	fmt.Printf("üéâ Root hash: %x\n", rootHash[:8])

	return rootHash, nil
}

func (cmd *CollectionManager) hashLeaf(key string, value []byte) []byte {
	hasher := blake3.New(32, nil)
	hasher.Write([]byte(key))
	hasher.Write(value)
	return hasher.Sum(nil)
}

func (cmd *CollectionManager) hashPair(left, right []byte) []byte {
	hasher := blake3.New(32, nil)
	hasher.Write(left)
	hasher.Write(right)
	return hasher.Sum(nil)
}
