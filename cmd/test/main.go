// main.go - UES Node —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º StorageManager
package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/signal"
	"pds/lexicon"
	"pds/storage"
	"strings"
	"syscall"
	"time"
)

// UESNode –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–∑–µ–ª UES —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
type UESNode struct {
	// –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ö—Ä–∞–Ω–µ–Ω–∏—è - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	StorageManager *storage.StorageManager

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∑–ª–∞
	Config *UESConfig
	NodeID string

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
	ctx    context.Context
	cancel context.CancelFunc
}

// UESConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∑–ª–∞ UES
type UESConfig struct {
	// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	DataDir     string `json:"dataDir"`
	StoragePath string `json:"storagePath"`
	IndexPath   string `json:"indexPath"`
	NodeID      string `json:"nodeId"`

	// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	MemoryCacheSizeMB int    `json:"memoryCacheSizeMb"`
	MaxConcurrentOps  int    `json:"maxConcurrentOps"`
	SyncInterval      string `json:"syncInterval"`

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
	EnableAutoCompact bool   `json:"enableAutoCompact"`
	CompactInterval   string `json:"compactInterval"`
	EnableMetrics     bool   `json:"enableMetrics"`

	// –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è)
	ListenAddr string   `json:"listenAddr"`
	PeerAddrs  []string `json:"peerAddrs"`

	// –î–µ–º–æ —Ä–µ–∂–∏–º
	RunDemo    bool   `json:"runDemo"`
	SchemaDir  string `json:"schemaDir"`
	AutoImport bool   `json:"autoImport"`
}

// NewUESNode —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —É–∑–µ–ª UES
func NewUESNode(configPath string) (*UESNode, error) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config, err := LoadConfig(configPath)
	if err != nil {
		return nil, fmt.Errorf("failed to load config: %w", err)
	}

	ctx, cancel := context.WithCancel(context.Background())

	node := &UESNode{
		Config: config,
		NodeID: config.NodeID,
		ctx:    ctx,
		cancel: cancel,
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è StorageManager
	storageConfig := storage.Config{
		DataDir:           config.DataDir,
		StoragePath:       config.StoragePath,
		IndexPath:         config.IndexPath,
		NodeID:            config.NodeID,
		MemoryCacheSizeMB: config.MemoryCacheSizeMB,
		MaxConcurrentOps:  config.MaxConcurrentOps,
		SyncInterval:      config.SyncInterval,
		EnableAutoCompact: config.EnableAutoCompact,
		CompactInterval:   config.CompactInterval,
		EnableMetrics:     config.EnableMetrics,
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π StorageManager
	log.Println("üöÄ Initializing UES Storage Manager...")
	node.StorageManager, err = storage.NewStorageManager(storageConfig)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("failed to create storage manager: %w", err)
	}

	log.Printf("‚úÖ UES Node initialized successfully with ID: %s", node.NodeID)
	return node, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —É–∑–µ–ª UES
func (node *UESNode) Start(ctx context.Context) error {
	log.Println("üöÄ Starting UES node...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
	go node.startMainServices(ctx)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–π –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
	if node.Config.RunDemo {
		if err := node.runDemoScenario(ctx); err != nil {
			log.Printf("‚ö†Ô∏è  Demo scenario failed: %v", err)
		}
	}

	log.Println("‚úÖ UES node started successfully")
	return nil
}

// Stop –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–∑–µ–ª
func (node *UESNode) Stop() error {
	log.Println("üõë Stopping UES node...")

	// –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	node.cancel()

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º StorageManager
	if node.StorageManager != nil {
		if err := node.StorageManager.Close(); err != nil {
			log.Printf("Error closing storage manager: %v", err)
			return err
		}
	}

	log.Println("‚úÖ UES node stopped")
	return nil
}

// startMainServices –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —É–∑–ª–∞
func (node *UESNode) startMainServices(ctx context.Context) {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			node.logSystemHealth(ctx)
		}
	}
}

// runDemoScenario –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
func (node *UESNode) runDemoScenario(ctx context.Context) error {
	log.Println("\nüé≠ Running UES Storage Manager Demo")
	log.Println("=" + strings.Repeat("=", 45))

	sm := node.StorageManager

	// 1. –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è –±–ª–æ–≥–∞ —á–µ—Ä–µ–∑ StorageManager
	log.Println("üìã 1. Creating blog schema...")

	blogSchema := &lexicon.LexiconDefinition{
		ID:          "demo.blog.post",
		Version:     "1.0.0",
		Name:        "Blog Post Demo",
		Description: "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –±–ª–æ–≥ –ø–æ—Å—Ç–∞",
		Schema: map[string]interface{}{
			"type": "object",
			"properties": map[string]interface{}{
				"title": map[string]interface{}{
					"type":      "string",
					"maxLength": 200,
				},
				"content": map[string]interface{}{
					"type":      "string",
					"maxLength": 50000,
				},
				"author": map[string]interface{}{
					"type": "string",
				},
				"category": map[string]interface{}{
					"type": "string",
					"enum": []interface{}{"tech", "lifestyle", "business"},
				},
				"tags": map[string]interface{}{
					"type": "array",
					"items": map[string]interface{}{
						"type": "string",
					},
				},
				"published": map[string]interface{}{
					"type": "boolean",
				},
			},
			"required": []interface{}{"title", "content", "author"},
		},
		Indexes: []lexicon.IndexDefinition{
			{
				Name:   "content_search",
				Fields: []string{"title", "content"},
				Type:   "fts",
			},
		},
	}

	if err := sm.RegisterSchema(ctx, blogSchema); err != nil {
		return fmt.Errorf("failed to register schema: %w", err)
	}
	log.Printf("‚úÖ Registered schema: %s", blogSchema.ID)

	// 2. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–ª–æ–≥ –ø–æ—Å—Ç–æ–≤
	log.Println("üìù 2. Creating blog posts...")
	blogPosts := []map[string]interface{}{
		{
			"title":     "StorageManager - —Ü–µ–Ω—Ç—Ä UES —Å–∏—Å—Ç–µ–º—ã",
			"content":   "StorageManager –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UES –≤ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –ø—Ä–æ—Å—Ç–æ–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏. –û–Ω –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç MST, –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä, blockstore –∏ lexicon system.",
			"author":    "ues-architect",
			"category":  "tech",
			"tags":      []interface{}{"storage", "architecture", "ues"},
			"published": true,
		},
		{
			"title":     "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
			"content":   "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π memory cache –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –¥–∞–Ω–Ω—ã–º. LRU –∞–ª–≥–æ—Ä–∏—Ç–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å—é.",
			"author":    "performance-engineer",
			"category":  "tech",
			"tags":      []interface{}{"performance", "cache", "optimization"},
			"published": true,
		},
		{
			"title":     "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏",
			"content":   "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.",
			"author":    "ops-engineer",
			"category":  "business",
			"tags":      []interface{}{"monitoring", "metrics", "ops"},
			"published": false,
		},
	}

	var createdRecords []*lexicon.TypedRecord
	for i, postData := range blogPosts {
		record, err := sm.CreateTypedRecord(ctx, "demo.blog.post", postData, fmt.Sprintf("demo-user-%d", i))
		if err != nil {
			log.Printf("Failed to create post %d: %v", i, err)
			continue
		}
		log.Printf("‚úÖ Created post: %s - %s", record.ID, postData["title"])
		createdRecords = append(createdRecords, record)
	}

	fmt.Println(createdRecords)

	// 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
	log.Println("üñºÔ∏è  3. Storing media files...")
	testFiles := []struct {
		name     string
		content  string
		mimeType string
	}{
		{"architecture.md", "# UES Architecture\n\nDetailed architecture documentation...", "text/markdown"},
		{"demo.json", `{"demo": true, "timestamp": "` + time.Now().Format(time.RFC3339) + `"}`, "application/json"},
		{"config.yaml", "# UES Config\nversion: 1.0\ncomponents: [storage, mst, indexer]", "text/yaml"},
	}

	var storedFiles []*storage.StoredFile
	for _, file := range testFiles {
		storedFile, err := sm.StoreFile(ctx, file.name, strings.NewReader(file.content), file.mimeType)
		if err != nil {
			log.Printf("Failed to store file %s: %v", file.name, err)
			continue
		}
		storedFiles = append(storedFiles, storedFile)
		log.Printf("‚úÖ Stored file: %s ‚Üí %s", file.name, storedFile.CID)
	}

	// 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
	log.Println("üîç 4. Searching records and files...")

	// –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	filter := &lexicon.QueryFilter{
		LexiconID: "demo.blog.post",
		Fields: map[string]interface{}{
			"category": "tech",
		},
		Limit: 10,
	}

	techPosts, err := sm.QueryRecords(ctx, filter)
	if err == nil {
		log.Printf("üìä Found %d tech posts", len(techPosts.Records))
	}

	// –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
	searchResults, err := sm.SearchFiles(ctx, "StorageManager", 10)
	if err == nil {
		log.Printf("üìä Full-text search found %d results", len(searchResults))
	}

	// 5. –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ
	if len(storedFiles) > 0 {
		log.Println("üìÅ 5. Retrieving stored file...")
		firstFile := storedFiles[0]

		reader, metadata, err := sm.GetFile(ctx, firstFile.CID)
		if err == nil {
			defer reader.Close()
			log.Printf("‚úÖ Retrieved file: %s (cached: %t)", metadata.Filename, metadata.Cached)
		}
	}

	// 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
	log.Println("üìä 6. System statistics...")
	stats, err := sm.GetSystemStats(ctx)
	if err == nil {
		log.Printf("üìà System Stats:")
		log.Printf("   ‚Ä¢ Node ID: %s", stats.NodeID)
		log.Printf("   ‚Ä¢ Indexed entries: %d", stats.IndexedEntries)
		log.Printf("   ‚Ä¢ Total size: %d bytes", stats.TotalSize)
		log.Printf("   ‚Ä¢ Schemas: %d", stats.TotalSchemas)
		log.Printf("   ‚Ä¢ Cache hits: %d, misses: %d", stats.CacheHits, stats.CacheMisses)

		if stats.Collections != nil {
			log.Printf("   ‚Ä¢ Collections:")
			for name, count := range stats.Collections {
				log.Printf("     - %s: %d items", name, count)
			}
		}
	}

	// 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
	log.Println("üè• 7. Health check...")
	health := sm.GetHealthStatus(ctx)
	log.Printf("ü©∫ Overall health: %s", health.Overall)

	for component, status := range health.Components {
		statusIcon := "‚úÖ"
		if status.Status != "healthy" {
			statusIcon = "‚ö†Ô∏è"
		}
		log.Printf("   %s %s: %s", statusIcon, component, status.Status)
		if status.Message != "" {
			log.Printf("     Message: %s", status.Message)
		}
	}

	// 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (mock)
	log.Println("üîÑ 8. Sync demonstration...")
	syncResult, err := sm.SyncWithPeer(ctx, "demo-peer-123")
	if err == nil {
		log.Printf("üîÑ Sync with peer completed:")
		log.Printf("   ‚Ä¢ Peer ID: %s", syncResult.PeerID)
		log.Printf("   ‚Ä¢ Local schemas: %d", syncResult.LocalSchemas)
		log.Printf("   ‚Ä¢ Success: %t", syncResult.Success)
	}

	log.Println("\nüéâ StorageManager demo completed successfully!")
	log.Println("‚ú® All UES components working through unified API!")

	return nil
}

// logSystemHealth –ª–æ–≥–∏—Ä—É–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
func (node *UESNode) logSystemHealth(ctx context.Context) {
	if stats, err := node.StorageManager.GetSystemStats(ctx); err == nil {
		log.Printf("üíì Node %s - Entries: %d, Cache: %d hits/%d misses",
			stats.NodeID, stats.IndexedEntries, stats.CacheHits, stats.CacheMisses)
	}
}

// LoadConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
func LoadConfig(configPath string) (*UESConfig, error) {
	// –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if _, err := os.Stat(configPath); os.IsNotExist(err) {
		defaultConfig := &UESConfig{
			DataDir:           "./data",
			StoragePath:       "./data/storage",
			IndexPath:         "./data/index.db",
			NodeID:            fmt.Sprintf("ues-node-%d", time.Now().UnixNano()),
			MemoryCacheSizeMB: 64,
			MaxConcurrentOps:  100,
			SyncInterval:      "5m",
			EnableAutoCompact: true,
			CompactInterval:   "1h",
			EnableMetrics:     true,
			ListenAddr:        "127.0.0.1:8080",
			RunDemo:           true,
			SchemaDir:         "./schemas",
			AutoImport:        true,
		}

		// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
		os.MkdirAll(defaultConfig.DataDir, 0755)
		if defaultConfig.SchemaDir != "" {
			os.MkdirAll(defaultConfig.SchemaDir, 0755)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if err := SaveConfig(configPath, defaultConfig); err != nil {
			return nil, fmt.Errorf("failed to save default config: %w", err)
		}

		return defaultConfig, nil
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	file, err := os.ReadFile(configPath)
	if err != nil {
		return nil, fmt.Errorf("failed to read config file: %w", err)
	}

	var config UESConfig
	if err := json.Unmarshal(file, &config); err != nil {
		return nil, fmt.Errorf("failed to parse config JSON: %w", err)
	}

	return &config, nil
}

// SaveConfig —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
func SaveConfig(configPath string, config *UESConfig) error {
	data, err := json.MarshalIndent(config, "", "  ")
	if err != nil {
		return fmt.Errorf("failed to marshal config: %w", err)
	}

	return os.WriteFile(configPath, data, 0644)
}

// main —Ñ—É–Ω–∫—Ü–∏—è - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
func main() {
	log.Println("üåü Starting Universal Entity Streams (UES) Node v2.0")
	log.Println("üîß With centralized StorageManager architecture")

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	configPath := "./config.json"
	if len(os.Args) > 1 {
		configPath = os.Args[1]
	}

	// –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª UES
	node, err := NewUESNode(configPath)
	if err != nil {
		log.Fatalf("Failed to create UES node: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	signalChan := make(chan os.Signal, 1)
	signal.Notify(signalChan, os.Interrupt, syscall.SIGTERM)

	go func() {
		<-signalChan
		log.Println("üõë Shutdown signal received")
		cancel()
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª
	if err := node.Start(ctx); err != nil {
		log.Fatalf("Failed to start UES node: %v", err)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-ctx.Done()

	// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∑–µ–ª
	if err := node.Stop(); err != nil {
		log.Printf("Error during shutdown: %v", err)
		os.Exit(1)
	}

	log.Println("üëã UES node shutdown complete - StorageManager architecture rocks! üöÄ")
}
