package storage

import (
	"context"
	"fmt"
	"log"
	"pds/blockstore"
	"pds/collection"
	"pds/datastore"
	"pds/helpers"
	"pds/oplog"

	blocks "github.com/ipfs/go-block-format"
	"github.com/ipfs/go-cid"
	ds "github.com/ipfs/go-datastore"
	badger4 "github.com/ipfs/go-ds-badger4"
	"github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/linking"
	cidlink "github.com/ipld/go-ipld-prime/linking/cid"
	"github.com/multiformats/go-multicodec"
	"github.com/multiformats/go-multihash"
)

// StorageManager –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UES —Å–∏—Å—Ç–µ–º—ã
type StorageManager struct {
	bs     *blockstore.Blockstore        // IPFS –±–ª–æ–∫—Å—Ç–æ—Ä
	cols   *collection.CollectionManager // –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–π
	oplog  oplog.OperationLog            // HLC operation log
	config Config                        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	nodeID string                        // ID —É–∑–ª–∞
}

// Config –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è storage –º–µ–Ω–µ–¥–∂–µ—Ä–∞
type Config struct {
	StoragePath string `json:"storagePath"`
	NodeID      string `json:"nodeId"`
}

// NewStorageManager —Å–æ–∑–¥–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Ö—Ä–∞–Ω–µ–Ω–∏—è
func NewStorageManager(config Config) (*StorageManager, error) {

	if config.NodeID == "" {
		return nil, fmt.Errorf("node ID is required")
	}

	sm := &StorageManager{
		config: config,
		nodeID: config.NodeID,
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	if err := sm.initializeComponents(); err != nil {
		return nil, fmt.Errorf("failed to initialize components: %w", err)
	}

	log.Printf("‚úÖ StorageManager initialized with node ID: %s", config.NodeID)

	return sm, nil
}

// initializeComponents –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
func (sm *StorageManager) initializeComponents() error {
	var err error

	// 1. –ë–∞–∑–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (BadgerDB)
	log.Println("üì¶ Initializing base storage...")
	storage, err := datastore.NewDatastorage(sm.config.StoragePath, datastore.Options{
		Options: badger4.DefaultOptions,
	})
	if err != nil {
		return fmt.Errorf("failed to create storage: %w", err)
	}

	// 2. Collection Manager
	log.Println("üå≥ Initializing CollectionManager...")
	sm.cols, err = collection.NewCollectionManager(storage)
	if err != nil {
		return fmt.Errorf("failed to create MST: %w", err)
	}

	// 3. IPFS Blockstore
	log.Println("üìÅ Initializing blockstore...")
	sm.bs = blockstore.NewBlockstore(storage)

	// 4. Operation Log
	log.Println("üìù Initializing operation log...")
	sm.oplog = oplog.NewStorageOperationLog(storage, sm.nodeID)

	return nil
}

// CollectionManager –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–π
func (sm *StorageManager) CollectionManager() *collection.CollectionManager {
	return sm.cols
}

// PutRaw —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–ª–æ–∫—Å—Ç–æ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö CID
func (sm *StorageManager) PutRaw(ctx context.Context, data []byte) (cid.Cid, error) {
	mh, err := multihash.Sum(data, multihash.BLAKE3, -1)
	if err != nil {
		return cid.Undef, err
	}
	c := cid.NewCidV1(cid.Raw, mh)
	blk, err := blocks.NewBlockWithCid(data, c)
	if err != nil {
		return cid.Undef, err
	}
	if err := sm.bs.Put(ctx, blk); err != nil {
		return cid.Undef, err
	}
	return c, nil
}

// Put —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç IPLD —É–∑–µ–ª –≤ –±–ª–æ–∫—Å—Ç–æ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–µ–∫–∞ dag-cbor –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func (sm *StorageManager) Put(ctx context.Context, node ipld.Node) (cid.Cid, error) {
	if node == nil {
		return cid.Undef, fmt.Errorf("node cannot be nil")
	}
	return sm.PutWithCodec(ctx, node, multicodec.DagCbor)
}

// PutWithCodec —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç IPLD —É–∑–µ–ª –≤ –±–ª–æ–∫—Å—Ç–æ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–¥–µ–∫–æ–º
func (sm *StorageManager) PutWithCodec(ctx context.Context, node ipld.Node, codec multicodec.Code) (cid.Cid, error) {
	if node == nil {
		return cid.Undef, fmt.Errorf("node cannot be nil")
	}
	linkProto := cidlink.LinkPrototype{
		Prefix: cid.Prefix{
			Version:  1,
			Codec:    uint64(codec),
			MhType:   multihash.BLAKE3,
			MhLength: -1,
		},
	}
	link, err := sm.bs.LinkSystem().Store(linking.LinkContext{Ctx: ctx}, linkProto, node)
	if err != nil {
		return cid.Undef, fmt.Errorf("failed to store node: %w", err)
	}
	cidLink, ok := link.(cidlink.Link)
	if !ok {
		return cid.Undef, fmt.Errorf("expected cidlink.Link, got %T", link)
	}
	return cidLink.Cid, nil
}

// PutRecord —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
func (sm *StorageManager) PutRecord(ctx context.Context, collection string, data any, author string) error {
	node, err := helpers.ToNode(data)
	if err != nil {
		return fmt.Errorf("failed to convert data to node: %w", err)
	}
	c, err := sm.Put(ctx, node)
	if err != nil {
		return fmt.Errorf("failed to put node: %w", err)
	}
	if err := sm.cols.PutInCollection(ctx, collection, ds.NewKey(c.String()), c.Bytes()); err != nil {
		return fmt.Errorf("failed to put in collection: %w", err)
	}
	return nil
}
